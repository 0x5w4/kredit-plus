version: "1.0"
services:
  postgresql:
    image: postgres:13-alpine
    container_name: postgresql
    expose:
      - "5432"
    ports:
      - "5432:5432"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=products
      - POSTGRES_HOST=5432
    command: -p 5432
    volumes:
      - ./microservices_pgdata:/var/lib/postgresql/data
    networks: ["microservices"]

  redis:
    image: redis:6-alpine
    restart: always
    container_name: microservices_redis
    ports:
      - "6379:6379"
    networks: ["microservices"]

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGODB_DATABASE: kredit
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_container:/data/db
    networks: ["microservices"]

  zookeeper1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper1
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: ["microservices"]

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    restart: always
    depends_on:
      - zookeeper1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-host.docker.internal}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks: ["microservices"]

  api_gateway_service:
    container_name: api_gateway_service
    build:
      context: .
      dockerfile: docker/api_gateway.Dockerfile
    ports:
      - "5001:5001"
      - "3001:3001"
      - "8001:8001"
    volumes:
      - ./:/app
    restart: always
    environment:
      - POSTGRES_HOST=host.docker.internal
      - POSTGRES_PORT=5432
      - REDIS_ADDR=host.docker.internal:6379
      - MONGO_URI=mongodb://host.docker.internal:27017
      - KAFKA_BROKERS=host.docker.internal:9092
      - READER_SERVICE=reader_service:5003
    depends_on:
      - redis
      - reader_service
      - writer_service
      - zookeeper1
      - kafka1
    networks: ["microservices"]

  reader_service:
    container_name: reader_service
    build:
      context: .
      dockerfile: docker/reader_service.Dockerfile
    ports:
      - "5003:5003"
      - "3003:3003"
      - "8003:8003"
    volumes:
      - ./:/app
    restart: always
    environment:
      - POSTGRES_HOST=host.docker.internal
      - POSTGRES_PORT=5432
      - REDIS_ADDR=host.docker.internal:6379
      - MONGO_URI=mongodb://host.docker.internal:27017
      - KAFKA_BROKERS=host.docker.internal:9092
    depends_on:
      - redis
      - mongo
      - postgesql
      - zookeeper1
      - kafka1
    networks: ["microservices"]

  writer_service:
    container_name: writer_service
    build:
      context: .
      dockerfile: docker/writer_service.Dockerfile
    ports:
      - "5002:5002"
      - "3002:3002"
      - "8002:8002"
    volumes:
      - ./:/app
    restart: always
    environment:
      - POSTGRES_HOST=host.docker.internal
      - POSTGRES_PORT=5432
      - REDIS_ADDR=host.docker.internal:6379
      - MONGO_URI=mongodb://host.docker.internal:27017
      - KAFKA_BROKERS=host.docker.internal:9092
    depends_on:
      - redis
      - postgesql
      - mongo
      - zookeeper1
      - kafka1
    networks: ["microservices"]

networks:
  microservices:
    name: microservices

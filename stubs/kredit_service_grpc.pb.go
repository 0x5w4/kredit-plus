// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: kredit_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotifService_HealthCheck_FullMethodName     = "/proto.NotifService/HealthCheck"
	NotifService_CreateKonsumen_FullMethodName  = "/proto.NotifService/CreateKonsumen"
	NotifService_CreateLimit_FullMethodName     = "/proto.NotifService/CreateLimit"
	NotifService_GetLimit_FullMethodName        = "/proto.NotifService/GetLimit"
	NotifService_CreateTransaksi_FullMethodName = "/proto.NotifService/CreateTransaksi"
	NotifService_GetTransaksi_FullMethodName    = "/proto.NotifService/GetTransaksi"
)

// NotifServiceClient is the client API for NotifService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	CreateKonsumen(ctx context.Context, in *CreateKonsumenRequest, opts ...grpc.CallOption) (*CreateKonsumenResponse, error)
	CreateLimit(ctx context.Context, in *CreateLimitRequest, opts ...grpc.CallOption) (*CreateLimitResponse, error)
	GetLimit(ctx context.Context, in *GetLimitRequest, opts ...grpc.CallOption) (*GetLimitResponse, error)
	CreateTransaksi(ctx context.Context, in *CreateLimitRequest, opts ...grpc.CallOption) (*CreateLimitResponse, error)
	GetTransaksi(ctx context.Context, in *CreateKonsumenRequest, opts ...grpc.CallOption) (*CreateKonsumenResponse, error)
}

type notifServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifServiceClient(cc grpc.ClientConnInterface) NotifServiceClient {
	return &notifServiceClient{cc}
}

func (c *notifServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, NotifService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifServiceClient) CreateKonsumen(ctx context.Context, in *CreateKonsumenRequest, opts ...grpc.CallOption) (*CreateKonsumenResponse, error) {
	out := new(CreateKonsumenResponse)
	err := c.cc.Invoke(ctx, NotifService_CreateKonsumen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifServiceClient) CreateLimit(ctx context.Context, in *CreateLimitRequest, opts ...grpc.CallOption) (*CreateLimitResponse, error) {
	out := new(CreateLimitResponse)
	err := c.cc.Invoke(ctx, NotifService_CreateLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifServiceClient) GetLimit(ctx context.Context, in *GetLimitRequest, opts ...grpc.CallOption) (*GetLimitResponse, error) {
	out := new(GetLimitResponse)
	err := c.cc.Invoke(ctx, NotifService_GetLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifServiceClient) CreateTransaksi(ctx context.Context, in *CreateLimitRequest, opts ...grpc.CallOption) (*CreateLimitResponse, error) {
	out := new(CreateLimitResponse)
	err := c.cc.Invoke(ctx, NotifService_CreateTransaksi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifServiceClient) GetTransaksi(ctx context.Context, in *CreateKonsumenRequest, opts ...grpc.CallOption) (*CreateKonsumenResponse, error) {
	out := new(CreateKonsumenResponse)
	err := c.cc.Invoke(ctx, NotifService_GetTransaksi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifServiceServer is the server API for NotifService service.
// All implementations must embed UnimplementedNotifServiceServer
// for forward compatibility
type NotifServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	CreateKonsumen(context.Context, *CreateKonsumenRequest) (*CreateKonsumenResponse, error)
	CreateLimit(context.Context, *CreateLimitRequest) (*CreateLimitResponse, error)
	GetLimit(context.Context, *GetLimitRequest) (*GetLimitResponse, error)
	CreateTransaksi(context.Context, *CreateLimitRequest) (*CreateLimitResponse, error)
	GetTransaksi(context.Context, *CreateKonsumenRequest) (*CreateKonsumenResponse, error)
	mustEmbedUnimplementedNotifServiceServer()
}

// UnimplementedNotifServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotifServiceServer struct {
}

func (UnimplementedNotifServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedNotifServiceServer) CreateKonsumen(context.Context, *CreateKonsumenRequest) (*CreateKonsumenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKonsumen not implemented")
}
func (UnimplementedNotifServiceServer) CreateLimit(context.Context, *CreateLimitRequest) (*CreateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLimit not implemented")
}
func (UnimplementedNotifServiceServer) GetLimit(context.Context, *GetLimitRequest) (*GetLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimit not implemented")
}
func (UnimplementedNotifServiceServer) CreateTransaksi(context.Context, *CreateLimitRequest) (*CreateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaksi not implemented")
}
func (UnimplementedNotifServiceServer) GetTransaksi(context.Context, *CreateKonsumenRequest) (*CreateKonsumenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaksi not implemented")
}
func (UnimplementedNotifServiceServer) mustEmbedUnimplementedNotifServiceServer() {}

// UnsafeNotifServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifServiceServer will
// result in compilation errors.
type UnsafeNotifServiceServer interface {
	mustEmbedUnimplementedNotifServiceServer()
}

func RegisterNotifServiceServer(s grpc.ServiceRegistrar, srv NotifServiceServer) {
	s.RegisterService(&NotifService_ServiceDesc, srv)
}

func _NotifService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifService_CreateKonsumen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKonsumenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifServiceServer).CreateKonsumen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifService_CreateKonsumen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifServiceServer).CreateKonsumen(ctx, req.(*CreateKonsumenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifService_CreateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifServiceServer).CreateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifService_CreateLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifServiceServer).CreateLimit(ctx, req.(*CreateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifService_GetLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifServiceServer).GetLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifService_GetLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifServiceServer).GetLimit(ctx, req.(*GetLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifService_CreateTransaksi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifServiceServer).CreateTransaksi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifService_CreateTransaksi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifServiceServer).CreateTransaksi(ctx, req.(*CreateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifService_GetTransaksi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKonsumenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifServiceServer).GetTransaksi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifService_GetTransaksi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifServiceServer).GetTransaksi(ctx, req.(*CreateKonsumenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifService_ServiceDesc is the grpc.ServiceDesc for NotifService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NotifService",
	HandlerType: (*NotifServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _NotifService_HealthCheck_Handler,
		},
		{
			MethodName: "CreateKonsumen",
			Handler:    _NotifService_CreateKonsumen_Handler,
		},
		{
			MethodName: "CreateLimit",
			Handler:    _NotifService_CreateLimit_Handler,
		},
		{
			MethodName: "GetLimit",
			Handler:    _NotifService_GetLimit_Handler,
		},
		{
			MethodName: "CreateTransaksi",
			Handler:    _NotifService_CreateTransaksi_Handler,
		},
		{
			MethodName: "GetTransaksi",
			Handler:    _NotifService_GetTransaksi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kredit_service.proto",
}

package proto

import (
	context "context"
	fmt "fmt"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/v2/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	strings "strings"
	time "time"
)

type KonsumenORM struct {
	CreatedAt    *time.Time
	Email        string     `gorm:"unique;not null"`
	FotoKtp      string     `gorm:"not null"`
	FotoSelfie   string     `gorm:"not null"`
	FullName     string     `gorm:"not null"`
	Gaji         uint64     `gorm:"not null"`
	IdKonsumen   string     `gorm:"type:uuid;primaryKey;default:uuid_generate_v4();not null"`
	LegalName    string     `gorm:"not null"`
	Nik          string     `gorm:"not null"`
	Password     string     `gorm:"not null"`
	TanggalLahir *time.Time `gorm:"not null"`
	TempatLahir  string     `gorm:"not null"`
	UpdatedAt    *time.Time
}

// TableName overrides the default tablename generated by GORM
func (KonsumenORM) TableName() string {
	return "konsumen"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Konsumen) ToORM(ctx context.Context) (KonsumenORM, error) {
	to := KonsumenORM{}
	var err error
	if prehook, ok := interface{}(m).(KonsumenWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.IdKonsumen = m.IdKonsumen
	to.Nik = m.Nik
	to.FullName = m.FullName
	to.LegalName = m.LegalName
	to.Gaji = m.Gaji
	to.TempatLahir = m.TempatLahir
	if m.TanggalLahir != nil {
		t := m.TanggalLahir.AsTime()
		to.TanggalLahir = &t
	}
	to.FotoKtp = m.FotoKtp
	to.FotoSelfie = m.FotoSelfie
	to.Email = m.Email
	to.Password = m.Password
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(KonsumenWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *KonsumenORM) ToPB(ctx context.Context) (Konsumen, error) {
	to := Konsumen{}
	var err error
	if prehook, ok := interface{}(m).(KonsumenWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.IdKonsumen = m.IdKonsumen
	to.Nik = m.Nik
	to.FullName = m.FullName
	to.LegalName = m.LegalName
	to.Gaji = m.Gaji
	to.TempatLahir = m.TempatLahir
	if m.TanggalLahir != nil {
		to.TanggalLahir = timestamppb.New(*m.TanggalLahir)
	}
	to.FotoKtp = m.FotoKtp
	to.FotoSelfie = m.FotoSelfie
	to.Email = m.Email
	to.Password = m.Password
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(KonsumenWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Konsumen the arg will be the target, the caller the one being converted from

// KonsumenBeforeToORM called before default ToORM code
type KonsumenWithBeforeToORM interface {
	BeforeToORM(context.Context, *KonsumenORM) error
}

// KonsumenAfterToORM called after default ToORM code
type KonsumenWithAfterToORM interface {
	AfterToORM(context.Context, *KonsumenORM) error
}

// KonsumenBeforeToPB called before default ToPB code
type KonsumenWithBeforeToPB interface {
	BeforeToPB(context.Context, *Konsumen) error
}

// KonsumenAfterToPB called after default ToPB code
type KonsumenWithAfterToPB interface {
	AfterToPB(context.Context, *Konsumen) error
}

// DefaultCreateKonsumen executes a basic gorm create call
func DefaultCreateKonsumen(ctx context.Context, in *Konsumen, db *gorm.DB) (*Konsumen, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(KonsumenORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(KonsumenORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type KonsumenORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type KonsumenORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadKonsumen(ctx context.Context, in *Konsumen, db *gorm.DB) (*Konsumen, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.IdKonsumen == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(KonsumenORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(KonsumenORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := KonsumenORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(KonsumenORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type KonsumenORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type KonsumenORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type KonsumenORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteKonsumen(ctx context.Context, in *Konsumen, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.IdKonsumen == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(KonsumenORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&KonsumenORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(KonsumenORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type KonsumenORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type KonsumenORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteKonsumenSet(ctx context.Context, in []*Konsumen, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.IdKonsumen == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.IdKonsumen)
	}
	if hook, ok := (interface{}(&KonsumenORM{})).(KonsumenORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id_konsumen in (?)", keys).Delete(&KonsumenORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&KonsumenORM{})).(KonsumenORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type KonsumenORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Konsumen, *gorm.DB) (*gorm.DB, error)
}
type KonsumenORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Konsumen, *gorm.DB) error
}

// DefaultStrictUpdateKonsumen clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateKonsumen(ctx context.Context, in *Konsumen, db *gorm.DB) (*Konsumen, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateKonsumen")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &KonsumenORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id_konsumen=?", ormObj.IdKonsumen).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(KonsumenORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(KonsumenORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(KonsumenORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type KonsumenORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type KonsumenORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type KonsumenORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchKonsumen executes a basic gorm update call with patch behavior
func DefaultPatchKonsumen(ctx context.Context, in *Konsumen, updateMask *field_mask.FieldMask, db *gorm.DB) (*Konsumen, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Konsumen
	var err error
	if hook, ok := interface{}(&pbObj).(KonsumenWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(KonsumenWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskKonsumen(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(KonsumenWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateKonsumen(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(KonsumenWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type KonsumenWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Konsumen, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type KonsumenWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Konsumen, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type KonsumenWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Konsumen, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type KonsumenWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Konsumen, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetKonsumen executes a bulk gorm update call with patch behavior
func DefaultPatchSetKonsumen(ctx context.Context, objects []*Konsumen, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Konsumen, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Konsumen, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchKonsumen(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskKonsumen patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskKonsumen(ctx context.Context, patchee *Konsumen, patcher *Konsumen, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Konsumen, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedTanggalLahir bool
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"IdKonsumen" {
			patchee.IdKonsumen = patcher.IdKonsumen
			continue
		}
		if f == prefix+"Nik" {
			patchee.Nik = patcher.Nik
			continue
		}
		if f == prefix+"FullName" {
			patchee.FullName = patcher.FullName
			continue
		}
		if f == prefix+"LegalName" {
			patchee.LegalName = patcher.LegalName
			continue
		}
		if f == prefix+"Gaji" {
			patchee.Gaji = patcher.Gaji
			continue
		}
		if f == prefix+"TempatLahir" {
			patchee.TempatLahir = patcher.TempatLahir
			continue
		}
		if !updatedTanggalLahir && strings.HasPrefix(f, prefix+"TanggalLahir.") {
			if patcher.TanggalLahir == nil {
				patchee.TanggalLahir = nil
				continue
			}
			if patchee.TanggalLahir == nil {
				patchee.TanggalLahir = &timestamp.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"TanggalLahir."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.TanggalLahir, patchee.TanggalLahir, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"TanggalLahir" {
			updatedTanggalLahir = true
			patchee.TanggalLahir = patcher.TanggalLahir
			continue
		}
		if f == prefix+"FotoKtp" {
			patchee.FotoKtp = patcher.FotoKtp
			continue
		}
		if f == prefix+"FotoSelfie" {
			patchee.FotoSelfie = patcher.FotoSelfie
			continue
		}
		if f == prefix+"Email" {
			patchee.Email = patcher.Email
			continue
		}
		if f == prefix+"Password" {
			patchee.Password = patcher.Password
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamp.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamp.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListKonsumen executes a gorm list call
func DefaultListKonsumen(ctx context.Context, db *gorm.DB) ([]*Konsumen, error) {
	in := Konsumen{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(KonsumenORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(KonsumenORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id_konsumen")
	ormResponse := []KonsumenORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(KonsumenORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Konsumen{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type KonsumenORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type KonsumenORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type KonsumenORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]KonsumenORM) error
}
